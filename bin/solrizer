#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'stomp'

options = {}

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: solrizer [options]"

  options[:hydra_home] = nil
  opts.on( '--hydra_home PATH', 'Load the Hydra instance  at this path' ) do |path|
    if File.exist?(File.join(path,"config","environment.rb"))
      options[:hydra_home] = path
    else 
      puts "#{path} does not appear to be a valid rails home"
      exit
    end
  end

  options[:port] = 61613
  opts.on('-p','--port NUM', 'Stomp port') do |port|
    options[:port] = port
  end

  options[:host] = 'localhost'
  opts.on('-o','--host HOSTNAME', 'Host to connect to') do |host|
    options[:host] = host
  end

  options[:user] = 'fedoraStomper'
  opts.on('-u', '--user USERNAME', 'User name for stomp listener') do |user|
    options[:user] = user
  end

  options[:password] = 'fedoraStomper'
  opts.on('-w', '--password PASSWORD', 'Password for stomp listener') do |password|
    options[:password] = password
  end

  options[:destination] = '/topic/fedora.apim.update'
  opts.on('-d','--destination TOPIC', 'Topic to listen to') do |destination|
    options[:destination] = destination
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

begin; require 'rubygems'; rescue; end

if options[:hydra_home]
  puts "Loading app..."
  Dir.chdir(options[:hydra_home])
  require File.join(options[:hydra_home],"config","environment.rb")

  puts "app loaded"
else
  $stderr.puts "The --hydra_home PATH option is mandatory. Please provide the path to the root of a valid Hydra instance."
  exit 1
end

puts "loading listener"

begin
  @port = options[:port] 
  @host = options[:host]
  @user = options[:user]
  @password = options[:password]
  @reliable = true
  @clientid = "fedora_stomper"
  @destination = options[:destination]


  $stderr.print "Connecting to stomp://#{@host}:#{@port} as #{@user}\n"
  @conn = Stomp::Connection.open(@user, @password, @host, @port, @reliable, 5, {"client-id" => @clientid} )
  $stderr.print "Getting output from #{@destination}\n"
  
  @conn.subscribe(@destination, {"activemq.subscriptionName" => @clientid, :ack =>"client" })

  @start_time = Time.now

  while true
      @msg = @conn.receive
      unless @msg.nil?
        pid = @msg.headers["pid"]
        method = @msg.headers["methodName"]

        if @msg.body == "heartbeat the topic"
          st = ActiveRecord::Base.connection.execute("update message_queues set last_heartbeat=\""+Time.now.to_s+"\" where name=\"fedora.apim.update\"")
          st.close
        end


        puts @msg.headers.inspect
        puts "\nPID: #{@msg.headers["pid"]}\n"
        if ["addDatastream", "addRelationship","ingest","modifyDatastreamByValue","modifyDatastreamByReference","modifyObject","purgeDatastream","purgeRelationship"].include? method
          if ["addDatastream", "addRelationship","modifyDatastreamByValue","modifyDatastreamByReference","modifyObject","purgeDatastream","purgeRelationship"].include? method

            escaped_pid = ActiveRecord::Base.connection.quote(@msg.headers["pid"])
            st = ActiveRecord::Base.connection.execute("update message_queues set last_pid_modified=\"" + escaped_pid + "\" where name=\"fedora.apim.update\"")
            st.close
            st = ActiveRecord::Base.connection.execute("update message_queues set last_modify=\""+Time.now.to_s+"\" where name=\"fedora.apim.update\"")
            st.close
          end
          if ["ingest"].include? method
            escaped_pid = ActiveRecord::Base.connection.quote(@msg.headers["pid"])
            st = ActiveRecord::Base.connection.execute("update message_queues set last_pid_ingested=\"" + escaped_pid + "\" where name=\"fedora.apim.update\"")
            st.close
            st = ActiveRecord::Base.connection.execute("update message_queues set last_ingest=\""+Time.now.to_s+"\" where name=\"fedora.apim.update\"")
            st.close
          end

          ActiveFedora::Base.find(@msg.headers["pid"], cast: true).update_index
        elsif method == "purgeObject"

          escaped_pid = ActiveRecord::Base.connection.quote(@msg.headers["pid"])
          st = ActiveRecord::Base.connection.execute("update message_queues set last_pid_purged=\"" + escaped_pid + "\" where name=\"fedora.apim.update\"")
          st.close
          st = ActiveRecord::Base.connection.execute("update message_queues set last_purge=\""+Time.now.to_s+"\" where name=\"fedora.apim.update\"")
          st.close


          ActiveFedora::SolrService.instance.conn.delete_by_id(pid)
        else
          $stderr.puts "Unknown Method: #{method}"
        end
        puts  "updated solr index for #{@msg.headers["pid"]}\n"
        @conn.ack @msg.headers["message-id"]
        # once a message has been ack'd rerack it
        @conn.publish "/topic/post.index.update", @msg.body, @msg.headers
      end #end unless @msg.nil?
 
      #debug information we find useful in logging
      @finish_time = Time.now
      elapsed = (@finish_time - @start_time).to_i / 60
      $stderr.print "Elapsed time : #{elapsed}"

  end #end while true
  @conn.join

rescue Exception => e
p e
end

